{
  "author": {
    "name": "Ben Ng",
    "email": "me@benng.me",
    "url": "http://benng.me"
  },
  "contributors": [
    {
      "name": "Jesús Leganés Combarro 'piranna'",
      "email": "piranna@gmail.com",
      "url": "http://pirannafs.blogspot.com.es"
    }
  ],
  "name": "minifyify",
  "description": "Minify your browserify bundles without losing the sourcemap",
  "keywords": [
    "browserify-plugin",
    "browserify",
    "uglify",
    "transform",
    "minify",
    "uglifyify",
    "compress"
  ],
  "version": "4.4.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/ben-ng/minifyify.git"
  },
  "main": "./lib",
  "dependencies": {
    "concat-stream": "1.4.x",
    "convert-source-map": "^0.4.0",
    "lodash.bind": "2.4.x",
    "lodash.defaults": "2.4.x",
    "lodash.foreach": "2.4.x",
    "mkdirp": "^0.5.0",
    "source-map": "0.1.34",
    "through": "2.3.x",
    "tmp": "0.0.23",
    "uglify-js": "2.4.x"
  },
  "scripts": {
    "test": "jake test --trace"
  },
  "devDependencies": {
    "coffeeify": "latest",
    "brfs": "1.0.2",
    "lodash.template": "latest",
    "jsesc": "latest",
    "utilities": "latest",
    "concat-stream": "latest",
    "browserify": "latest",
    "jake": "latest",
    "jquery-browserify": "latest",
    "sourcemap-validator": "latest",
    "backbone": "latest",
    "hbsfy": "latest",
    "envify": "latest",
    "handlebars": "latest",
    "handlebars-runtime": "latest"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "0.10.x"
  },
  "license": "MIT",
  "readme": "Minifyify\n=========\n#### Tiny, Debuggable Browserify Bundles\n\n[![Build Status](https://travis-ci.org/ben-ng/minifyify.png?branch=master)](https://travis-ci.org/ben-ng/minifyify)\n\n*Now with Browserify 5 & CoffeeScript support*\n\nBefore, browserify made you choose between sane debugging and sane load times. Now, you can have both.\n\nMinifyify is a browserify plugin that minifies your code. The magic? The sourcemap points back to the original, separate source files.\n\nNow you can deploy a minified bundle in production, and still have meaningful stack traces when things inevitably break!\n\n## Advantages\n\nThere are advantages to using minifyify over your current minification solution:\n\n\n * Reliability\n\nIf you are currently using uglifyify and realized that your sourcemap is behaving strangely, you're not alone. Minifyify builds its own sourcemap instead of depending on uglify-js's `insourcemap` option, and has proven to be more reliable in practice.\n\n * Smaller Bundles\n\nIf you are currently running uglify-js on the bundle browserify outputs, minifyify can give you a smaller bundle because it removes dead code before browserify processes requires in it.\n\nFor example:\n```javascript\nif(process.env.browser) {\n  var realtime = require('socket-io.client')\n}\nelse {\n  var realtime = require('socket-io')\n}\n```\n\nOnly one of the required modules will be in your output bundle, because minifyify runs uglify on each individual file before browserify does its bundling.\n\n * A Neater Web Inspector\n\nMinifyify allows you to transform those obnoxious absolute paths in your web inspector with `compressPath`.\n\n * CoffeeScript Support\n\nMinifyify is tested against CoffeeScript, and can map minified code all the way back to the original `.coffee` files.\n\n## Usage\n\n### Programmatic API\n```js\nvar browserify = require('browserify')\n    // As of browserify 5, you must enable debug mode in the constructor to use minifyify\n  , bundler = new browserify({debug: true});\n\nbundler.add('entry.js');\n\nbundler.plugin('minifyify', {map: 'bundle.map.json'});\n\nbundler.bundle(function (err, src, map) {\n  // Your code here\n});\n```\n\nThe map option should be the location of the sourcemap on your server, and is used to insert the `sourceMappingURL` comment in `src`.\n\n### Command Line\n```sh\n$ browserify entry.js -d -p [minifyify --map bundle.map.json --output bundle.map.json] > bundle.js\n```\n\nThe `--output` option is a required option on the command line interface and specifies where minifyify should write the sourcemap to on disk.\n\n## Options\n\n### [options.compressPath]\n\nShorten the paths you see in the web inspector by defining a compression function.\n\n```\n// A typical compressPath function\ncompressPath: function (p) {\n  return path.relative('my-app-root', p);\n}\n```\n\nIf a string is provided, it will be used instead of `my-app-root` in the function above. This is useful if you are working from the command line and cannot define a function.\n\nDefaults to a no-op (absolute paths to all source files).\n\n### [options.map]\n\nThis is added to the bottom of the minified source file, and should point to where the map will be accessible from on your server. [More details here](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-howwork).\n\nExample: If your bundle is at `mysite.com/bundle.js` and the map is at `mysite.com/map.js`, set `options.map = '/map.js'`\n\nSet to `false` to minify, but not produce a source map or append the source map URL comment.\n\n### [options.minify]\n\nSet to false to disable minification and source map transforms. This essentially turns minifyify into a pass-thru stream.\n\nIf you set it to an object, it will be passed as the options argument to `uglify.minify`.\n\n### [options.output]\n\nSpecify a path to write the sourcemap to. Required when using the CLI, optional when working programmatically.\n\n### [options.uglify]\n\nWill be passed to `uglify.minify`\n\n## FAQ\n\n * PARSE ERROR!\n\n   Are you using `brfs`? Pin it to version `1.0.2`. See issue #44 for details.\n\n * This doesn't work with watchify\n\n   It doesn't, and I'm not going to support watchify because minifyify is only intended for production use. If you're using minifyify to get coffeescript sourcemaps in development, sorry, that's not the job of this module!\n\n * Wait.. Why did the total size (souce code + map) get BIGGER??\n\n   It's not immediately obvious, but the more you minify code, the bigger the sourcemap gets. Browserify can get away with merely mapping lines to lines because it is going from uncompressed code to uncompressed code. Minifyify squishes multiple lines together, so the sourcemap has to carry more information.\n\n   This is OK because the sourcemap is in a separate file, which means your app will be snappy for your users as their browsers won't download the sourcemap.\n\n * How does this work?\n\n   Minifyify runs UglifyJS on each file in your bundle, and transforms browserify's sourcemap to map to the original files.\n\n * Why does the sourcemap cause my debugger to behave erratically?\n\n   Some of the optimizations UglifyJS performs will result in sourcemaps that appear to broken. For example, when UglifyJS uses the comma operator to shorten statements on different lines, a single debugger \"step\" in minified code may execute multiple lines of the original source.\n\n   Another common example of erratic behavior is when code like this is compressed:\n\n   ```\n   var myThing = myFunc('a')\n     , cantGetHere = myFunc('b');\n   ```\n\n   If you set a breakpoint on the second line, your debugger might not pause execution there. I've found that setting the breakpoint on the first line and stepping onto the second line is more reliable.\n\n## Other Modules\n\nminifyify not working for you? try [gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps).\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2014 Ben Ng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/ben-ng/minifyify/issues"
  },
  "homepage": "https://github.com/ben-ng/minifyify",
  "_id": "minifyify@4.4.0",
  "dist": {
    "shasum": "030f1b5c262197912cc4a60956b8f3e07969c766"
  },
  "_from": "minifyify@",
  "_resolved": "https://registry.npmjs.org/minifyify/-/minifyify-4.4.0.tgz"
}
